// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js models for Prisma
model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Event         Event[]
  Participant   Participant[]
  tokenBalance  Int      @default(0)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Tournament and participation logic
model Event {
  id           String        @id @default(cuid())
  name         String
  description  String?
  ownerId      String
  owner        User          @relation(fields: [ownerId], references: [id])
  participants Participant[]
  createdAt    DateTime      @default(now())
  applyStart   DateTime
  applyEnd     DateTime
  maxParticipants Int @default(10)
  registrationClosed Boolean @default(false)
  bracketState Json?
}

model Participant {
  id       String   @id @default(cuid())
  userId   String
  eventId  String // <-- should be eventId, not EventId
  user     User     @relation(fields: [userId], references: [id])
  event    Event    @relation(fields: [eventId], references: [id])
  joinedAt DateTime @default(now())
  // Add more fields as needed (e.g., teamName, status, etc)

  @@unique([eventId, userId])
}
